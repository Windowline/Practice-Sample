uniform vec2 u_resolution;

varying vec2 v_texcoord; // full quad base

const float E = 0.00001;



float insideCheck(p)

{

 // 모델식에 따라 적절히.. 내부:- 외부:+

}



float getShortestSurfaceDistance(vec3 eye, vec3 ray, float start, float end)

{

    float rayMag = start;

    for (int i = 0; i < 50; i++) {

        float dist = insideCheck(eye + rayMag * ray);

        if (dist < E) {

            return rayMag;

        }

        rayMag += dist;

        if (rayMag >= end) {

            return end;

        }

    } 

    return end;

}



vec2 getRay(float fovy)

{

float distanceZ = u_resolution.y / tan(radians(fovy) / 2.0);

return normalize(vec3(v_texcoord.xy, -distanceZ)); 

}



﻿void main() 

{

vec3 eye = vec3(0.0, 0.0, 10.0);

vec3 ray = getRay(45.0):

float distanceToSurface = getShortestSurfaceDistance(eye, ray, 0.0, 50.0);



vec3 surface = eye + ray *  distanceToSurface;



vec3 surfaceNormal =  normalize(vec3(

        insideCheck(vec3(surface.x + E, surface.y, surface.z)) - insideCheck(vec3(surface.x - E, surface.y, surface.z)),

        insideCheck(vec3(surface.x, surface.y + E, surface.z)) - insideCheck(vec3(surface.x, surface.y - E, surface.z)),

        insideCheck(vec3(surface.x, surface.y, surface.z  + E)) - insideCheck(vec3(surface.x, surface.y, surface.z - E))

    ));



///....

}
